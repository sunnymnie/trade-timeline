import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import {
  fetchTrades,
  createTrade,
  updateTrade,
  destroyTrade,
} from "./tradeAPI";
import produce from "immer";
// import { fetchCount } from './counterAPI';

export interface tradesState {
  trades: tradeState[];
  status: string;
}

export interface TradeFormData {
  trade: {
    id?: string;
    title: string;
    description: string;
  };
}

export interface TradeUpdateData {
  trade_id: number;
  trade: tradeState;
}

export interface TradeDeleteData {
  trade: {
    trade_id: number;
  };
}

export interface tradeState {
  id?: number;
  title?: string;
  description?: string;
  start?: any;
  end?: any;
  early_start?: any;
  late_end?: any;
  conviction?: number;
  created_at: any;
  updated_at: any;
}

export enum Status {
  Initial = "initial",
  Loading = "loading",
  Fetched = "fetched",
  Error = "error",
}

const initialState: tradesState = {
  trades: [
    {
      id: 0,
      title: "",
      description: "",
      start: "",
      end: "",
      early_start: "",
      late_end: "",
      conviction: 0,
      created_at: "",
      updated_at: "",
    },
  ],
  status: Status.Initial,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   "counter/fetchCount",
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload

//     return response.data;
//   }
// );

export const fetchTradesAsync = createAsyncThunk(
  "trades/fetchTrades",
  async () => {
    const response = await fetchTrades();
    return response;
  }
);

export const createTradeAsync = createAsyncThunk(
  "trades/createTrade",
  async (payload: TradeFormData) => {
    const response = await createTrade(payload);
    return response;
  }
);

export const updateTradeAsync = createAsyncThunk(
  "trades/updateTrade",
  async (payload: TradeFormData) => {
    const response = await updateTrade(payload);
    return response;
  }
);

export const destroyTradeAsync = createAsyncThunk(
  "trades/destroyTrade",
  async (payload: TradeDeleteData) => {
    const response = await destroyTrade(payload);
    return response;
  }
);

export const tradesSlice = createSlice({
  name: "trades",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions, ie synchronous actions.
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchTradesAsync.pending, (state) => {
        // state.status = "loading";
        return produce(state, (draftState) => {
          draftState.status = Status.Loading;
        });
      })
      .addCase(fetchTradesAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.trades = action.payload;
          draftState.status = Status.Fetched;
        });
      })
      .addCase(fetchTradesAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Status.Error;
        });
      })
      /* Create section */
      .addCase(createTradeAsync.pending, (state) => {
        // state.status = "loading";
        return produce(state, (draftState) => {
          draftState.status = Status.Loading;
        });
      })
      .addCase(createTradeAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.trades.push(action.payload);
          draftState.status = Status.Fetched;
        });
      })
      .addCase(createTradeAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Status.Error;
        });
      })
      /* Update section */
      .addCase(updateTradeAsync.pending, (state) => {
        // state.status = "loading";
        return produce(state, (draftState) => {
          draftState.status = Status.Loading;
        });
      })
      .addCase(updateTradeAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          const index = draftState.trades.findIndex(
            (trade) => trade.id === action.payload.trade.id
          );
          draftState.trades[index] = action.payload;
          draftState.status = Status.Fetched;
        });
      })
      .addCase(updateTradeAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Status.Error;
        });
      })
      /* Destroy section */
      .addCase(destroyTradeAsync.pending, (state) => {
        // state.status = "loading";
        return produce(state, (draftState) => {
          draftState.status = Status.Loading;
        });
      })
      .addCase(destroyTradeAsync.fulfilled, (state, action) => {
        return produce(state, (draftState) => {
          draftState.trades = action.payload;
          draftState.status = Status.Fetched;
        });
      })
      .addCase(destroyTradeAsync.rejected, (state) => {
        return produce(state, (draftState) => {
          draftState.status = Status.Error;
        });
      });
  },
});

// export const { setSortDirection } = tradesSlice.actions;
export const {} = tradesSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTrades = (state: RootState) => state.trades.trades;

export const selectStatus = (state: RootState) => state.trades.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default tradesSlice.reducer;
